[{"/Users/yoansalvayre/Desktop/SBT-Cairo-Piyolu/starknet-react-next/pages/_app.tsx":"1","/Users/yoansalvayre/Desktop/SBT-Cairo-Piyolu/starknet-react-next/pages/index.tsx":"2","/Users/yoansalvayre/Desktop/SBT-Cairo-Piyolu/starknet-react-next/src/components/ConnectWallet.tsx":"3","/Users/yoansalvayre/Desktop/SBT-Cairo-Piyolu/starknet-react-next/src/components/IncrementCounter.tsx":"4","/Users/yoansalvayre/Desktop/SBT-Cairo-Piyolu/starknet-react-next/src/components/TransactionList.tsx":"5"},{"size":507,"mtime":1655811038040,"results":"6","hashOfConfig":"7"},{"size":3769,"mtime":1655810882561,"results":"8","hashOfConfig":"7"},{"size":624,"mtime":1655629742159,"results":"9","hashOfConfig":"7"},{"size":694,"mtime":1655402683000,"results":"10","hashOfConfig":"7"},{"size":697,"mtime":1655402683000,"results":"11","hashOfConfig":"7"},{"filePath":"12","messages":"13","suppressedMessages":"14","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"doyke7",{"filePath":"15","messages":"16","suppressedMessages":"17","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"18"},{"filePath":"19","messages":"20","suppressedMessages":"21","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"22","messages":"23","suppressedMessages":"24","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"25","messages":"26","suppressedMessages":"27","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/yoansalvayre/Desktop/SBT-Cairo-Piyolu/starknet-react-next/pages/_app.tsx",[],[],"/Users/yoansalvayre/Desktop/SBT-Cairo-Piyolu/starknet-react-next/pages/index.tsx",["28","29"],[],"import {\n  useStarknet,\n  useStarknetCall,\n  useStarknetInvoke,\n} from \"@starknet-react/core\";\nimport type { NextPage } from \"next\";\nimport { useCallback, useMemo, useState } from \"react\";\nimport { toBN } from \"starknet/dist/utils/number\";\nimport { bnToUint256, uint256ToBN } from \"starknet/dist/utils/uint256\";\nimport { ConnectWallet } from \"~/components/ConnectWallet\";\nimport { TransactionList } from \"~/components/TransactionList\";\nimport { useNFTContract } from \"~/hooks/erc721\";\nimport styles from \"../pages/nft.module.scss\";\n\nfunction UserBalance() {\n  const { account } = useStarknet();\n  const { contract } = useNFTContract();\n\n  const { data, loading, error } = useStarknetCall({\n    contract,\n    method: \"balanceOf\",\n    args: account ? [account] : undefined,\n  });\n\n  const content = useMemo(() => {\n    if (loading || !data?.length) {\n      return <div>Loading balance</div>;\n    }\n\n    if (error) {\n      return <div>Error: {error}</div>;\n    }\n\n    const balance = uint256ToBN(data[0]);\n    return <div>{balance.toString(10)}</div>;\n  }, [data, loading, error]);\n\n  return (\n    <div style={{ color: \"white\", textAlign: \"center\" }}>\n      <h2>Your balance: {content}</h2>\n    </div>\n  );\n}\n\nfunction MintNFT() {\n  const { account } = useStarknet();\n  const [amount, setAmount] = useState(\"\");\n  const [amountError, setAmountError] = useState<string | undefined>();\n\n  const { contract } = useNFTContract();\n\n  const { loading, error, reset, invoke } = useStarknetInvoke({\n    contract,\n    method: \"mint\",\n  });\n\n  const onMint = useCallback(() => {\n    reset();\n    if (account && !amountError) {\n      const message = `${amount.toString()} tokens to ${account}`;\n      const amountBn = bnToUint256(amount);\n      invoke({\n        args: [],\n        metadata: { method: \"mint\", message },\n      });\n    }\n  }, [account, amount, amountError, invoke, reset]);\n\n  const mintButtonDisabled = useMemo(() => {\n    if (loading) return true;\n    return !account || !!amountError;\n  }, [loading, account, amountError]);\n\n  return (\n    <div style={{ color: \"white\", textAlign: \"center\" }}>\n      <h2>Click below to mint your first Starknet NFT !</h2>\n\n      <button\n        className={styles.button}\n        disabled={mintButtonDisabled}\n        onClick={onMint}\n      >\n        {loading ? \"Waiting for wallet\" : \"Mint\"}\n      </button>\n      {error && <p>Error: {error}</p>}\n    </div>\n  );\n}\n\nconst NFTPage: NextPage = () => {\n  const { account } = useStarknet();\n\n  return (\n    <div\n      className={styles.container}\n      style={{\n        backgroundImage:\n          \"url(https://starkgate.starknet.io/static/media/stars.38edc9a7.png), url(./static/media/light-accent.1ec16f0c.png)\",\n        backgroundColor: \"#8b8dc2\",\n      }}\n    >\n      {!!!account ? (\n        <div className={styles.connect}>\n          <p style={{ color: \"white\" }}>Connect Wallet</p>\n          <ConnectWallet />\n        </div>\n      ) : (\n        <>\n          <p style={{ textAlign: \"center\", color: \"white\" }}>\n            Connected: {account}\n          </p>\n          <div className={styles.center}>\n            <div\n              style={{\n                display: \"flex\",\n                flexDirection: \"row\",\n                justifyContent: \"center\",\n                alignItems: \"center\",\n              }}\n            >\n              <img\n                src=\"../assets/logoStarknet.png\"\n                width={300}\n                alt=\"logoStarknet\"\n                style={{ marginRight: \"16px\" }}\n              />\n              <img src=\"../assets/logoBlockslab.png\" width={60} alt=\"logo\" />\n            </div>\n\n            <UserBalance />\n            <MintNFT />\n            <TransactionList />\n          </div>\n        </>\n      )}\n    </div>\n  );\n};\n\nexport default NFTPage;\n","/Users/yoansalvayre/Desktop/SBT-Cairo-Piyolu/starknet-react-next/src/components/ConnectWallet.tsx",[],[],"/Users/yoansalvayre/Desktop/SBT-Cairo-Piyolu/starknet-react-next/src/components/IncrementCounter.tsx",[],[],"/Users/yoansalvayre/Desktop/SBT-Cairo-Piyolu/starknet-react-next/src/components/TransactionList.tsx",[],[],{"ruleId":"30","severity":1,"message":"31","line":121,"column":15,"nodeType":"32","endLine":126,"endColumn":17},{"ruleId":"30","severity":1,"message":"31","line":127,"column":15,"nodeType":"32","endLine":127,"endColumn":78},"@next/next/no-img-element","Do not use <img>. Use Image from 'next/image' instead. See: https://nextjs.org/docs/messages/no-img-element","JSXOpeningElement"]